"""
Make the cdf plot to be used by the paper
"""

import numpy as np
from matplotlib import pyplot as plt
import matplotlib

matplotlib.rcParams['image.interpolation'] = None

defaultsize=14
ds=4
font = {'family' : 'Calibri',
        'weight' : 'normal',
        'size'   : defaultsize}
matplotlib.rc('font', **font)

def main():
    
    # hard-codes the infiles to be used
    indir = "LocOutput/"
    infiles = [
        indir+"localised_vvmax_data_NSFR_0.0_alpha_0.dat",
        indir+"localised_vvmax_data_NSFR_1.0_alpha_0.dat",
        #indir+"localised_vvmax_data_NSFR_2.0_alpha_0.dat",
        indir+"localised_vvmax_data_NSFR_0.0_alpha_-1.5.dat",
        indir+"localised_vvmax_data_NSFR_1.0_alpha_-1.5.dat",
        #indir+"localised_vvmax_data_NSFR_2.0_alpha_-1.5.dat"
        ]
    infiles = [
        indir+"localised_vvmax_data_NSFR_0.0_alpha_0.dat",
        indir+"localised_vvmax_data_NSFR_1.0_alpha_0.dat",
        indir+"localised_vvmax_data_NSFR_2.0_alpha_0.dat",
        indir+"localised_vvmax_data_NSFR_0.0_alpha_-1.5.dat",
        indir+"localised_vvmax_data_NSFR_1.0_alpha_-1.5.dat",
        indir+"localised_vvmax_data_NSFR_2.0_alpha_-1.5.dat"
        ]
    
    labels = [
        "$n_{\\rm SFR}=0, \\alpha=0$",
        "$n_{\\rm SFR}=1, \\alpha=0$",
        "$n_{\\rm SFR}=2, \\alpha=0$",
        "$n_{\\rm SFR}=0, \\alpha=-1.5$",
        "$n_{\\rm SFR}=1, \\alpha=-1.5$",
        "$n_{\\rm SFR}=2, \\alpha=-1.5$"
        ]
    
    #linestyles = ["-","--",":","-","--",":"]
    #linestyles = ["-","--","-","--"]
    linestyles = ["--","-",":","--","-",":"]
    
    plt.figure()
    for i,infile in enumerate(infiles):
        vvmax = read_data(infile)
        xvals,yvals = make_ks_xy(vvmax)
        if i%3==0:
            plt.plot(xvals,yvals,label=labels[i],linestyle = linestyles[i],linewidth=2)
        else:
            plt.plot(xvals,yvals,label=labels[i],linestyle = linestyles[i],color=plt.gca().lines[-1].get_color(),linewidth=2)
            
    plt.plot([0.,1.],[0.,1.],color='black',linestyle=':')
    
    plt.xlabel('$V/V_{\\rm max}$')
    plt.ylabel('CDF')
    plt.legend(loc="upper left",fontsize=12)
    plt.xlim(0,1)
    plt.ylim(0,1)
    plt.tight_layout()
    plt.savefig("paper_kstest.pdf")
    plt.close()

def make_ks_xy(x):
    """
    makes a nice line to plot for a ks plot
    """
    x = np.sort(x)
    N = x.size
    xvals = np.zeros([2*N+2])
    yvals = np.zeros([2*N+2])
    
    xvals[0]=0.
    xvals[-1] = 1.
    yvals[-2] = 1.
    yvals[-1] = 1.
    for i in np.arange(N):
        xvals[2*i+1] = x[i]
        xvals[2*i+2] = x[i]
        yvals[2*i] = i/N
        yvals[2*i+1] = i/N
    return xvals,yvals


def read_data(infile):
    """
    Reads in output files generated by calc_vvmax.py
    Returns only the V / Vmax values - all that's relevant
    """
    data = np.loadtxt(infile)
    FRBs = data[:,0]
    JHz = data[:,1]
    zmaxB = data[:,2]
    zmaxC = data[:,3]
    V = data[:,4]
    Vmax = data[:,5]
    VVmax = data[:,6]
    return VVmax


main()
